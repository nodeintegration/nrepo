#!/usr/bin/env perl

use strict;
use warnings;

use Config::General;
use Getopt::Long;
use Log::Dispatch;
use Pod::Usage;

use App::Nrepo;
use App::Nrepo::Logger;

# VERSION

my $config_file = '/etc/nrepo.conf';
my $log_level;
my $help;
my $app_options = {};

GetOptions(
  # App Options
  'action=s'  => \$app_options->{'action'},
  'file=s@'   => \$app_options->{'file'},
  'arch=s'    => \$app_options->{'arch'},
  'checksums' => \$app_options->{'checksums'},
  'force'     => \$app_options->{'force'},
  'repo=s'    => \$app_options->{'repo'},
  'regex'     => \$app_options->{'regex'},
  'tag=s'     => \$app_options->{'tag'},
  'src-tag=s' => \$app_options->{'src-tag'},
  'symlink'   => \$app_options->{'symlink'},
  # Script options
  'config-file=s' => \$config_file,
  'log-level=s'   => \$log_level,
  'h|help'        => \$help,
) or pod2usage(-verbose=>2, -output => \*STDERR);

pod2usage(-verbose=>2, -output => \*STDERR) if $help;

my $conf_o = Config::General->new(
    -ConfigFile         => $config_file,
    -UseApacheInclude   => 1,
    -IncludeDirectories => 1,
    -IncludeGlob        => 1,
    -IncludeRelative    => 1,
    -IncludeAgain       => 1,
    -AllowMultiOptions  => 1,
);
my $config = {$conf_o->getall};

# Setup Default Config
$config->{tag_style}      ||= 'bottomdir';
$config->{log_file_level} ||= 'info';
$config->{screen_level}   ||= 'notice';
# We allow the cli to override the config for ScreenLevel
$config->{screen_level} = $log_level if $log_level;

# Setup Logging
my $log_outputs = [
  [ 'Screen', 'min_level' => $config->{screen_level}, stderr => 0, newline => 1, ],
];
push @{$log_outputs}, [
  'File',
  'min_level' => $config->{log_file_level},
  'filename'  => $config->{log_file},
  'newline'   => 1,
  'mode'      => '>>',
] if $config->{log_file};
my $logger = Log::Dispatch->new(outputs => $log_outputs);
App::Nrepo::Logger->load($logger);
$logger->debug('logging initialized.');

my $a = App::Nrepo->new(config => $config, logger => $logger);
my $action = delete $app_options->{'action'};
# Params::Validate does not like undef which GetOptions will fill with options
for my $param (keys %{$app_options}) {
  delete $app_options->{$param} unless defined $app_options->{$param};
}
$a->go($action, $app_options);

__END__

=head1 NAME

nrepo - Repository Management

=head1 DESCRIPTION

Nrepo is designed to be an extensible repository management system
Currently it provides a basic framework and support for Yum based repositories.
Stay tuned for more!

=head1 SYNOPSIS

  nrepo --action X [options]

  See perldoc App::Nrepo for all valid actions and their in depth descriptions

  Actions:
    list      List all configured repositories
    mirror    Mirror a repository
      requires:
        --repo (all|$regex|$repository_name)
      optional:
        --checksums
        --regex (uses --repo value as a regex)
    tag       Tag a repository
      requires:
        --repo $repository_name
        --tag  $destination_tag
      optional:
        --src-tag $src_tag (defaults to 'head')
        --symlink (default false)
    clean     Cleans a repository of unreferenced files
      requires:
        --repo (all|$regex|$repository_name)
      optional:
        --regex (uses --repo value as a regex)
    init      Initialise a custom repository
      requires:
        --repo $repository_name
    add-file  Add files to a custom repository
      requires:
        --repo $repository_name
        --arch $arch
        --file $path_to_file (--file can be supplied multiple times)
    del-file  Remove files from a custom repository
      requires:
        --repo $repository_name
        --arch $arch
        --file $path_to_file (--file can be supplied multiple times)
 
  Script Options:
    --config-file    Path to config-file, defaults to ./conf/nrepo.conf
    --log-level      Change the stdout log level (overrides config)
    --help           This helpful message

=head1 EXAMPLES

  # Working with mirrored repos:

  # Update the repository from upstream to current
  nrepo --action mirror --repo centos-6-epel
  # Tag the newly updated packages/manifests with a hard tag
  nrepo --action tag --repo centos-6-epel --tag release_20150827
  # Tag the hard tag with a soft tag that your clients reference
  nrepo --action tag --repo centos-6-epel --src-tag release_20150827 --symlink --tag production

  # Working with local repos:

  # Add some packages:
  nrepo --action add-file --repo centos-6-custom --arch x86_64 --file /path/to/package_foo-1.0-el6.x86_64.rpm --file /path/to/package_bar-1.0-el6.x86_64.rpm
  # Tag the newly updated packages/manifests with a hard tag
  nrepo --action tag --repo centos-6-custom --tag release_20150827
  # Tag the hard tag with a soft tag that your clients reference
  nrepo --action tag --repo centos-6-epel --src-tag release_20150827 --symlink --tag production

  # Working with tags:
  # Lets say upstream added broken updates you can easily roll back your production tag just by:
  # --force is needed if a destination tag already exists
  nrepo --action tag --repo $repo --src-tag $last_stable_releas_tag --symlink --tag production --force 

=head1 CONFIGURATION

=item Global Options

=over 4

=item B<data_dir>

Path to location where repository files are stored eg:

  data_dir = /path/to/repo_data

=item B<include>

You can use this to include other conf files or directories eg:

  include /path/to/repos.conf
  include /path/to/conf.d

=item B<tag_style>

This determines how tag directories are done eg:

bottomdir (default) would result in a data structure like:

  $data_dir/$repo_name/$tag

topdir would result in a data structure like:

  $data_dir/$tag/$repo_name

=item B<log_file>

Path to log output to (No default) eg:

  log_file = /path/to/logfile.log

=item B<log_file_level>

Log messages to log file at this level (defaults to 'info')
Levels acceptable are what L<Log::Dispatch> supports

=item B<screen_level>

Same as log_level but to STDOUT...this value can be overwritten at runtime using --log-level
Defaults to 'notice'

=back

=item Global and/or repository

=over 4

=item B<hard_tag_regex>

This option will use the repository config value if present otherwise the global value if present eg:

  hard_tag_regex = ^release_\d{8}$

=back

=item B<Repository Config>

A repository is defined as:

  <repo $reponame>
    $option1 = $value1
    ...
    $optionN = $valueN
  </>

Valid options include:

=over 4

=item type

The repository base type, ie Yum, Apt, Plain etc

=item local

The directory relative to $data_dir

=item url

The url to mirror from

=item ca

An optional ca cert file used when mirroring from upstream https (ie like Redhats cdn network)

=item cert

An optional cert file used when mirroring from upstream https (ie like Redhats cdn network)

=item key

An optional cert key file used when mirroring from upstream https (ie like Redhats cdn network)

=back

=cut
